;$(-argvname)
;$(-argvname:) 记住上次输入
;$(-argvname:default) 以default为默认值

[build:release]
command:c=gcc -O3 --std=c23 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" -lm  
command:cpp=gcc -O3 --std=c++23 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" -lstdc++ -lm -msse3
command:java=javac -d "$(VIM_ROOT)/.build" "$(VIM_FILEPATH)"
command:rust=cargo locate-project &>/dev/null && cmd='cargo build --release' || cmd='rustc -g "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"' ; eval $cmd
command:go=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
#运行前保存所有改动的文件
save=2

[build:debug]
command:c=gcc --std=c23 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" --debug -lm
command:cpp=gcc --std=c++23 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)" -lstdc++ -lm -msse3 --debug
command:java=javac -d "$(VIM_ROOT)/.build" "$(VIM_FILEPATH)"
command:rust=cargo locate-project &>/dev/null && cmd='cargo build' || cmd='rustc -g "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT)"' ; eval $cmd
output=quickfix
cwd=$(VIM_FILEDIR)
save=2 

[run]
command="$(VIM_FILEPATH)"
command:sql=iconv -f UTF-8 -t GBK $(VIM_FILEPATH)|mysql.exe -uroot -p$(-passwd:) 2>&1 | iconv -f GBK -t UTF-8
command:c,cpp="$(VIM_PATHNOEXT)"
command:java=java -cp "$(VIM_ROOT)/.build" "$(VIM_FILENOEXT)" 
command:rust=cargo locate-project &>/dev/null && cmd='cargo run --' || cmd='"$(VIM_FILEDIR)/$(VIM_FILENOEXT)"' ; eval $cmd

command:go="$(VIM_PATHNOEXT)"
command:python=python "$(VIM_FILENAME)"
command:make=make -f "$(VIM_FILENAME)" run
command:R=Rscript "$(VIM_FILENAME)"

command:emake=emake -e "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=lua "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:zsh=zsh "$(VIM_FILENAME)"
command:bash=bash "$(VIM_FILENAME)"
command:fish=fish "$(VIM_FILENAME)"
command:php=php "$(VIM_FILENAME)"
command:erlang=escript "$(VIM_FILENAME)"
command:ps1=powershell -file "$(VIM_FILENAME)"
command:scala=scala "$(VIM_FILENAME)"
command:haskell=ghci "$(VIM_FILENAME)"
command:applescript=osascript "$(VIM_FILENAME)"
output=terminal
pos=bottom
cwd=$(VIM_FILEDIR)
save=2

[cargoscript-run]
command:rust=cargo script "$(VIM_FILENAME)"
output=terminal
pos=bottom


[project_build:release]
command:make=make -f "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
save=2 

[project_build:debug]
command:make=make -f "$(VIM_FILEPATH)"
output=quickfix
cwd=$(VIM_FILEDIR)
save=2 




###CMAKE###
[cmake_config]
command:cmake=cmake -Bbuild && cmake --build build --target help|awk 'NR==3 {print "all"} NR>=3 {print}'|sed 's#\.\.\. ##g;/^clean$/d;/^depend$/d;/^edit_cache$/d;/^rebuild_cache$/d;/\//d;/\\\\/d' >$(VIM_ROOT)/.targets
output=quickfix
save=2 

[cmake_build_all]
command:cmake=cmake --build build --target all
output=quickfix
save=2

[cmake_build_fzf]
command:cmake=cmake --build build --target $(cat $(VIM_ROOT)/.targets|fzf)
output=terminal
pos=bottom
save=2

[cmake_run_fzf]
command:cmake=$(VIM_ROOT)/build/$(cat $(VIM_ROOT)/.targets | awk 'NR>=2' | fzf)
output=terminal
pos=bottom
save=2

